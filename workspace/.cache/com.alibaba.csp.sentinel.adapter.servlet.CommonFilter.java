 // Source code is unavailable, and was generated by the Fernflower decompiler.
package com.alibaba.csp.sentinel.adapter.servlet;

import com.alibaba.csp.sentinel.Entry;
import com.alibaba.csp.sentinel.EntryType;
import com.alibaba.csp.sentinel.SphU;
import com.alibaba.csp.sentinel.Tracer;
import com.alibaba.csp.sentinel.adapter.servlet.callback.RequestOriginParser;
import com.alibaba.csp.sentinel.adapter.servlet.callback.UrlCleaner;
import com.alibaba.csp.sentinel.adapter.servlet.callback.WebCallbackManager;
import com.alibaba.csp.sentinel.adapter.servlet.util.FilterUtil;
import com.alibaba.csp.sentinel.context.ContextUtil;
import com.alibaba.csp.sentinel.slots.block.BlockException;
import com.alibaba.csp.sentinel.util.StringUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class CommonFilter implements Filter {
   private static final String HTTP_METHOD_SPECIFY = "HTTP_METHOD_SPECIFY";
   private static final String COLON = ":";
   private boolean httpMethodSpecify = false;
   private static final String EMPTY_ORIGIN = "";

   public void init(FilterConfig filterConfig) {
      this.httpMethodSpecify = Boolean.parseBoolean(filterConfig.getInitParameter("HTTP_METHOD_SPECIFY"));
   }

   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
      HttpServletRequest sRequest = (HttpServletRequest)request;
      Entry urlEntry = null;
      List<Object> requestBody = new ArrayList();
      HttpServletRequest servletRequestWrapper;
      if (this.isFormDataType(sRequest)) {
         servletRequestWrapper = sRequest;
      } else {
         servletRequestWrapper = FilterUtil.getInputData(sRequest, requestBody);
      }

      try {
         String target = FilterUtil.filterTarget(sRequest);
         UrlCleaner urlCleaner = WebCallbackManager.getUrlCleaner();
         if (urlCleaner != null) {
            target = urlCleaner.clean(target);
         }

         if (!StringUtil.isEmpty(target)) {
            String origin = this.parseOrigin(sRequest);
            ContextUtil.enter("sentinel_web_servlet_context", origin);
            if (this.httpMethodSpecify) {
               String pathWithHttpMethod = sRequest.getMethod().toUpperCase() + ":" + target;
               urlEntry = SphU.entry(pathWithHttpMethod, 1, EntryType.IN);
            } else if (requestBody.size() > 0) {
               Object[] args = new Object[]{requestBody.get(0)};
               urlEntry = SphU.entry(target, 1, EntryType.IN, args);
            } else {
               urlEntry = SphU.entry(target, 1, EntryType.IN);
            }
         }

         chain.doFilter(servletRequestWrapper, response);
      } catch (BlockException var16) {
         HttpServletResponse sResponse = (HttpServletResponse)response;
         WebCallbackManager.getUrlBlockHandler().blocked(servletRequestWrapper, sResponse, var16);
      } catch (ServletException | RuntimeException | IOException var17) {
         Tracer.traceEntry(var17, urlEntry);
         throw var17;
      } finally {
         if (urlEntry != null) {
            if (requestBody.size() > 0) {
               urlEntry.exit(1, new Object[]{requestBody.get(0)});
            } else {
               urlEntry.exit();
            }
         }

         ContextUtil.exit();
      }

   }

   private String parseOrigin(HttpServletRequest request) {
      RequestOriginParser originParser = WebCallbackManager.getRequestOriginParser();
      String origin = "";
      if (originParser != null) {
         origin = originParser.parseOrigin(request);
         if (StringUtil.isEmpty(origin)) {
            return "";
         }
      }

      return origin;
   }

   public void destroy() {
   }

   private boolean isFormDataType(HttpServletRequest sRequest) {
      return sRequest.getContentType() != null && sRequest.getContentType().toLowerCase().startsWith("multipart/");
   }
}
